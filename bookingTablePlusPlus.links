import MvuHTML;
import MvuAttrs;
import Mvu;


typename Time = String;
typename RoomID = Int;
typename BookingID = Int;
typename Booker = String;
typename Purpose = String;
typename Booking = (bookingID: BookingID, time: Time, booker: String, purpose: String);
typename Room = (name: String, roomID: Int, bookings: [Booking]);

# STEP 1: Design a database (remember that tables can't contain lists)

# table room = ...;
# table booking = ...;
# table roomToBooking  = ...;

# table room = (name : String);
# table booking = (time: Time);
# table roomToBooking = (name : String, time : Time, booker: String, purpose: String);

var db = database "bookings";

var tableRoom = table "room"
  with (roomid : Int, name : String) from db;
var tableBooking = table "booking"
  with (bookingid : Int, time : Time, booker : String, purpose : String) where bookingid readonly from db;
var tableRoomToBooking = table "roomtobooking"
  with (roomid : Int, bookingid : Int) from db;

# ---

# room = (...)
# booking = (1, "12-1", "Simon", "Supervision")
# roomToBooking = ("Meeting room", 1), ("Meeting room", 2)

# Step 2: Make SQL for your tables
# https://www.w3schools.com/sql/sql_create_table.asp

# CREATE TABLE ...;

# Step 3: Make Links "table" definitions for all of your tables

#   table "items" with (i : Int, name : String)
#    from database "draggable"


# Step 4: Query the tables and construct your model

# sig queryRoom : (table) ~> [String]
fun queryRoom(tableRoom) {
  query {
    for (t <-- tableRoom)
      [(roomid = t.roomid, name = t.name)]
  }
}

# sig queryBooking : (table) ~> [(Time, String, String)]
fun queryBooking(tableBooking) {
  query {
    for (t <-- tableBooking)
      [(bookingid = t.bookingid, time =t.time, booker = t.booker, purpose = t.purpose)]
  }
}

# sig queryRoomToBooking : (table) ~> [(String, String)]
fun queryRoomToBooking(tableRoomToBooking) {
  query {
    for (t <-- tableRoomToBooking)
      [(roomid = t.roomid, bookingid = t.bookingid)]
  }
}

typename Row = (time: String, roomBookings: [(roomID: RoomID,  bookingID: BookingID, name: String, booked: Bool, booker: String, purpose: String)]);
typename RoomBookings = (name: String, booked: Bool, booker: String, purpose: String);
typename RoomName = String;

fun getBookings(i,tableRoomToBooking, tableBooking){
  query{
    for(rtb <-- tableRoomToBooking)
    where(rtb.roomid == i)
      for(b <-- tableBooking)
      where(b.bookingid == rtb.bookingid)
      [(bookingID = b.bookingid, time = b.time, booker = b.booker, purpose = b.purpose)]
  }
}

fun getRooms(tableRoom, tableRoomToBooking, tableBooking){
  var rooms = [];
  for(r <- queryRoom(tableRoom))
    (roomID = r.roomid, name = r.name, bookings = getBookings(r.roomid, tableRoomToBooking, tableBooking)) :: rooms

}




fun deleteBooking(bookingID) server{
  # Delete from tableBooking
  delete (x <-- tableBooking)
    where ( x.bookingid == bookingID);
  # Delete from tableRoomToBooking
  delete (x <-- tableRoomToBooking)
    where ( x.bookingid == bookingID)
}

#fun updateBooking(tableBooking, i, time, booker, purpose){
#    update (("time", "booker", "purpose") <-- tableBooking)
#    where(tableBooking.bookingid == i)
#      set (tableBooking.time=time, tableBooking.booker=booker, tableBooking.purpose=purpose)
#}

typename FormData = (roomid: Int, time: Time, booker: String, purpose: String);
typename Model = ([Time], [Room], Maybe(FormData));

# Kevin TODO: Define the message SetBooking:(Room, Time, Bool)
typename Message = [| DeleteBooking:(BookingID) | InsertBooking:(RoomID, Time) 
                    | UpdateBooker:(Booker) | UpdatePurpose:(Purpose)
                    | Submit |];

sig getBookingInfo : ([Booking], Time) ~> Maybe (Booking)
fun getBookingInfo(bookings, time) {
  switch (bookings) {
    case [] -> Nothing
    case x :: xs ->
      if (x.time == time) {
        Just (x)
      } else {
        getBookingInfo(xs, time)
      }
  }
}

sig mkRows : ([Time], [Room]) ~> [Row]
fun mkRows(times, roomStatus) {
    # Each time is a different row
    switch (times) {
        # Empty list of times means empty list of rows
        case [] -> []
        # If you have a time x, then you need to construct a row
        case x :: xs ->
            # Remember that each row is of type Row, so needs a time and a list of bookings.
            var row =
                # The time is just x
                (time = x,
                # For the bookings, you look over each room, and use the "elem" function to
                # to check whether the current time is in the bookings list.
                 roomBookings =
                    map(fun(status) {
                        switch (getBookingInfo(status.bookings, x)) {
                           case Nothing ->
                             (roomID = status.roomID,
                              bookingID = (-1),
                              name = status.name,
                              booked = false,
                              booker = "",
                              purpose = "")
                           case Just(x) ->
                             (roomID = status.roomID,
                              bookingID = x.bookingID,
                              name = status.name,
                              booked = true,
                              booker = x.booker,
                              purpose = x.purpose)
                        }
                    }, roomStatus));
            row :: mkRows(xs, roomStatus)
    }
}

# Kevin TODO: Create the correct message here
fun htmlTd(roomBooking, bookingTime){
  open MvuHTML;
  open MvuAttrs;
  if(roomBooking.booked){
    td(class("table-bordered border-dark table-active table-danger"), textNode(roomBooking.booker) +* textNode(roomBooking.purpose) +*
       button(onClick(fun() { DeleteBooking(roomBooking.bookingID) }), textNode("Delete Booking")))
       
  }else{
    td(class("table-bordered border-dark table-danger"), textNode("") +*
    button(onClick(fun() { InsertBooking(roomBooking.roomID, bookingTime) }), textNode("Insert Booking")))
  }
}

fun htmlHead(room){
  open MvuHTML;
  open MvuAttrs;
  td(class("table-align align-middle"), textNode(room.name))
}

sig htmlRow : (Row) ~> MvuHTML.HTML(Message)
fun htmlRow(row) {
  open MvuHTML;
  open MvuAttrs;
  var roomBookings = row.roomBookings;
  var time =row.time;
  var htmlTd = map(fun(roomBooking){htmlTd(roomBooking, time)}, roomBookings);
  tr(class("table-bordered border-dark table-warning"), td(class("table-bordered border-dark"), textNode(time)) +* MvuHTML.concat(htmlTd))
}

sig htmlTable : ([Room], [Row]) ~> MvuHTML.HTML(Message)
fun htmlTable(rooms, rows) {
  open MvuHTML;
  open MvuAttrs;
  var htmlRows = map(htmlRow, rows);
  var htmlHead = map(htmlHead, rooms);
  var tableHead = thead(class("table-dark border-dark ") +@ style("text-align: center"), tr(MvuAttrs.empty, td(MvuAttrs.empty, textNode("Time/RoomType")) +* MvuHTML.concat(htmlHead)));
  var tableBody = tbody(style("text-align: center"), MvuHTML.concat(htmlRows));
  table_(class("table table-bordered"), tableHead +* tableBody)
}

sig insertForm: (Maybe(FormData)) ~> MvuHTML.HTML(Message)
fun insertForm(formdata){
  open MvuHTML;
  open MvuAttrs;
  switch(formdata){
    case Nothing -> MvuHTML.empty
    case Just(formdata) ->
      input(
        # Text input box
        type("input") +@
        # Input: Raise UpdateContents message whenever box changed
        onInput(fun(str) { UpdateBooker(str) }) +@
        # Ensure that the box contents reflect the model
        value(formdata.booker),
        MvuHTML.empty) +*

        input(
        # Text input box
        type("input") +@
        # Input: Raise UpdateContents message whenever box changed
        onInput(fun(str) { UpdatePurpose(str) }) +@
        # Ensure that the box contents reflect the model
        value(formdata.purpose),
        MvuHTML.empty) +*

        # Button raises Submit event
        button(onClick(fun () { Submit }), textNode("Submit"))
  }
}

sig view : (Model) ~> MvuHTML.HTML(Message)
fun view((times, roomStatus, formdata)) {
  open MvuHTML;
  var rows = mkRows(times, roomStatus);
  htmlTable(roomStatus, rows) +* insertForm(formdata)
}

## Kevin TODO: Write the update function
# 1. Case split on the message
# 2. Construct a list with a modified room
#    Model: ([Time], [Room])
#    To create an updated list of rooms, only when r.name matches rName: map(fun (r) { if (r.name == rName) { ... } else { r }  }, rooms)
#    To add `time` to a list: time :: times
#    To remove `time` from a list: filter(fun(t) { t <> time }, times)



sig deleteBookingFromRoom : (Room, BookingID) ~> Room
fun deleteBookingFromRoom(room, bookingID) {
  (room with bookings = filter(fun(b){ b.bookingID <> bookingID }, room.bookings))
}

sig insertBooking : (FormData) ~> BookingID
fun insertBooking(formdata) server{
  var bookingid = insert tableBooking values [(time = formdata.time, booker = formdata.booker, purpose = formdata.purpose)] returning bookingid;
  insert tableRoomToBooking values [(roomid = formdata.roomid, bookingid = bookingid)];
  bookingid
}

sig addBooking : (BookingID, RoomID, Purpose, Time, Booker, [Room]) ~> [Room]
fun addBooking(bookingID, roomID, purpose, time, booker, room){
  var newroom = map(fun (r) { 
    if (r.roomID == roomID) {
      var newBookings = (bookingID = bookingID, time = time, booker = booker, purpose = purpose) :: r.bookings;
      (r with bookings =  newBookings)
    } else {r}
  }, room);
  newroom
}

sig updt : (Message, Model) ~> Model
fun updt(msg, (times, room, formdata)) {
    switch(msg){
      case DeleteBooking(bookingID) ->
        deleteBooking(bookingID);
        var newRooms = map(fun(r){ deleteBookingFromRoom(r, bookingID) }, room);
        (times, newRooms, formdata)
      case InsertBooking(roomID, time) ->
        var formdata = (roomid = roomID, time = time, booker = "", purpose = "");
        (times, room, Just(formdata))
      case UpdateBooker(str) ->
      switch(formdata){
        case Just(formdata) ->
          (times, room, Just((formdata with booker = str)))
        case Nothing ->
          (times, room, formdata)
      }

      case UpdatePurpose(str) ->
      switch(formdata){
        case Just(formdata) ->
          (times, room, Just((formdata with purpose = str)))
        case Nothing ->
          (times, room, formdata)
      }

      case Submit ->
        switch(formdata){
          case Just(formdata) ->
          var bookingid = insertBooking(formdata);
          var newRoom = addBooking(bookingid, formdata.roomid, formdata.purpose, formdata.time, formdata.booker, room);
          (times, newRoom, Nothing)
          case Nothing ->
          (times, room, Nothing)
        }
      case _ -> (times, room, formdata)


    }

}

fun mainPage() {
  var rooms : [Room] = getRooms(tableRoom, tableRoomToBooking, tableBooking);
  var times : [String] = ["10-12", "12-14", "14-16", "16-18"];
  var model : Model = (times, rooms, Nothing);

  Mvu.runSimple("placeholder", model, view, updt);
  page
    <html>
    <head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU" crossorigin="anonymous"></link>
    </head>
    <body><div id="placeholder"></div></body></html>
}

serveThis(mainPage)
