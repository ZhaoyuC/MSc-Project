import MvuHTML;
import MvuAttrs;
import Mvu;

typename Time = String;
typename Room = (name: String, bookings: [Time]);
typename Row = (time: String, roomBookings: [(name: String, booked: Bool, booker: String, purpose: String)]);
typename RoomBookings = (name: String, booked: Bool, booker: String, purpose: String);
typename RoomName = String;

typename RoomStatus = (name: String, bookings: [Time], booker: String, purpose: String);

sig rooms : [Room]
var rooms =
    [(name = "Meeting room", bookings = ["10-12", "16-18"]),
     (name = "Lounge", bookings = ["10-12", "14-16"]),
     (name = "Boardroom", bookings = ["12-14", "16-18"])];
     
sig roomStatus : [RoomStatus]
var roomStatus =
    [(name = "Meeting room", bookings = ["10-12", "16-18"], booker = "Kevin", purpose = " project meeting"),
     (name = "Lounge", bookings = ["10-12", "14-16"], booker = "Simon", purpose = " supervision"),
     (name = "Boardroom", bookings = ["12-14", "16-18"], booker = "John", purpose = " project meeting")];

var times = ["10-12", "12-14", "14-16", "16-18"];

typename Model = ([Time], [RoomStatus]);

# Kevin TODO: Define the message SetBooking:(Room, Time, Bool)
typename Message = [| SetBooking:(RoomName, Time, Bool) |];

sig model : Model
var model = (times, roomStatus);

sig mkRows : ([Time], [RoomStatus]) ~> [Row]
fun mkRows(times, roomStatus) {
    # Each time is a different row
    switch (times) {
        # Empty list of times means empty list of rows
        case [] -> []
        # If you have a time x, then you need to construct a row
        case x :: xs ->
            # Remember that each row is of type Row, so needs a time and a list of bookings.
            var row =
                # The time is just x
                (time = x,
                # For the bookings, you look over each room, and use the "elem" function to
                # to check whether the current time is in the bookings list.
                 roomBookings =
                    map(fun(status) {
                        (name = status.name,
                         booked = elem(x, status.bookings),
                         booker = status.booker,
                         purpose = status.purpose)
                    }, roomStatus));
            row :: mkRows(xs, roomStatus)
    }
}

# Kevin TODO: Create the correct message here
fun htmlTd(roomBooking, bookingTime){
  open MvuHTML;
  open MvuAttrs;
  if(roomBooking.booked){
    td(class("table-bordered border-dark table-active table-danger"), textNode(roomBooking.booker) +* textNode(roomBooking.purpose) +*
       button(onClick(fun() { SetBooking(roomBooking.name, bookingTime, false) }), textNode("Set unbooked")))
  }else{
    td(class("table-bordered border-dark table-danger"), textNode("") +*
       button(onClick(fun() { SetBooking(roomBooking.name, bookingTime, true) }), textNode("Set booked")))
  }
}

fun htmlHead(room){
  open MvuHTML;
  open MvuAttrs;
  td(class("table-align align-middle"), textNode(room.name))
}

sig htmlRow : (Row) ~> MvuHTML.HTML(Message)
fun htmlRow(row) {
  open MvuHTML;
  open MvuAttrs;
  var roomBookings = row.roomBookings;
  var time =row.time;
  var htmlTd = map(fun(roomBooking){htmlTd(roomBooking, time)}, roomBookings);
  tr(class("table-bordered border-dark table-warning"), td(class("table-bordered border-dark"), textNode(time)) +* MvuHTML.concat(htmlTd))
}

sig htmlTable : ([Row]) ~> MvuHTML.HTML(Message)
fun htmlTable(rows) {
  open MvuHTML;
  open MvuAttrs;
  var htmlRows = map(htmlRow, rows);
  var htmlHead = map(htmlHead, rooms);
  var tableHead = thead(class("table-dark border-dark ") +@ style("text-align: center"), tr(MvuAttrs.empty, td(MvuAttrs.empty, textNode("Time/RoomType")) +* MvuHTML.concat(htmlHead)));
  var tableBody = tbody(style("text-align: center"), MvuHTML.concat(htmlRows));
  table_(class("table table-bordered"), tableHead +* tableBody)
}

sig view : (Model) ~> MvuHTML.HTML(Message)
fun view((times, roomStatus)) {
  var rows = mkRows(times, roomStatus);
  htmlTable(rows)
}

## Kevin TODO: Write the update function
# 1. Case split on the message
# 2. Construct a list with a modified room
#    Model: ([Time], [Room])
#    To create an updated list of rooms, only when r.name matches rName: map(fun (r) { if (r.name == rName) { ... } else { r }  }, rooms)
#    To add `time` to a list: time :: times
#    To remove `time` from a list: filter(fun(t) { t <> time }, times)

sig updateRoom : (RoomStatus, Time, Bool) ~> RoomStatus
fun updateRoom(roomStatus, time, booked){
  if(booked){
    var newBookings = time :: roomStatus.bookings;
    (roomStatus with bookings = newBookings)
  }else{
    (roomStatus with bookings = filter(fun(t){t <> time}, roomStatus.bookings))
  }
}


sig updt : (Message, Model) ~> Model
fun updt(msg, (times, roomStatus)) {
    switch(msg){
      case SetBooking(roomName, bookingTime, booked) ->
        var newRooms = map(fun(r){ if(r.name == roomName){updateRoom(r, bookingTime, booked)} else {r} }, roomStatus);
        (times, newRooms)
    }

}

fun mainPage() {
  Mvu.runSimple("placeholder", model, view, updt);
  page
    <html>
    <head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU" crossorigin="anonymous"></link>
    </head>
    <body><div id="placeholder"></div></body></html>
}

serveThis(mainPage)
